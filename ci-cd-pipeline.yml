apiVersion: tekton.dev/v1beta1
kind: Pipeline
metadata:
  name: ci-cd-pipeline
spec:
  params:
    - name: app-name
      type: string
      default: app
    - name: build-image
      type: string
      default: image-registry.openshift-image-registry.svc:5000/$(context.pipelineRun.namespace)/app:latest
    - name: git-url
      type: string
      default: https://github.com/MokhtarLahjaily/ci-cd-final-project.git
    - name: git-revision
      type: string
      default: main
  workspaces:
    - name: output
  tasks:
    # Task 1: Cleanup (regular Task)
    - name: cleanup
      taskRef:
        kind: Task
        name: cleanup
      workspaces:
        - name: source
          workspace: output
    
    # Task 2: Git Clone (ClusterTask)
    - name: git-clone
      taskRef:
        kind: ClusterTask
        name: git-clone
      params:
        - name: url
          value: $(params.git-url)
        - name: revision
          value: $(params.git-revision)
      workspaces:
        - name: output
          workspace: output
      runAfter:
        - cleanup
    
    # Task 3: Flake8 Linting (inline task)
    - name: flake8-lint
      taskSpec:
        workspaces:
          - name: source
        steps:
          - name: lint
            image: python:3.9-slim
            workingDir: $(workspaces.source.path)
            script: |
              #!/bin/bash
              set -e
              echo "Installing dependencies..."
              python -m pip install --upgrade pip
              pip install -r requirements.txt
              echo "Running flake8 linting..."
              flake8 service --count --select=E9,F63,F7,F82 --show-source --statistics
              flake8 service --count --max-complexity=10 --max-line-length=127 --statistics
              echo "Linting completed successfully!"
      workspaces:
        - name: source
          workspace: output
      runAfter:
        - git-clone
    
    # Task 4: Nose Tests (regular Task)
    - name: nose-tests
      taskRef:
        kind: Task
        name: nose
      params:
        - name: args
          value: -v --with-spec --spec-color --with-coverage --cover-package=app
      workspaces:
        - name: source
          workspace: output
      runAfter:
        - flake8-lint
    
    # Task 5: Build Image (ClusterTask)
    - name: build-image
      taskRef:
        kind: ClusterTask
        name: buildah
      params:
        - name: IMAGE
          value: $(params.build-image)
        - name: DOCKERFILE
          value: ./Dockerfile
      workspaces:
        - name: source
          workspace: output
      runAfter:
        - nose-tests
    
    # Task 6: Deploy Application (ClusterTask)
    - name: deploy-app
      taskRef:
        kind: ClusterTask
        name: openshift-client
      params:
        - name: SCRIPT
          value: |
            echo "Deploying application..."
            oc create deployment $(params.app-name) --image=$(params.build-image) --dry-run=client -o yaml | oc apply -f -
            oc expose deployment $(params.app-name) --port=8080 --target-port=8080
            oc expose service $(params.app-name)
            echo "Application deployed successfully!"
      runAfter:
        - build-image
